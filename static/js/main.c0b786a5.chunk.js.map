{"version":3,"sources":["components/Hex.js","components/Game.js","components/App.js","index.js","components/css/game.module.scss"],"names":["Hex","this","WIDTH","HEIGHT","currentPlayer","gameOver","winner","board","Array","searched","searchedQueue","i","fill","r","c","inBound","findWin","f","result","dfs","cell","found","neighbors","push","neighbor","f1","f2","connectTop","connectBottom","connectLeft","connectRight","connect1","findConnection","connect2","console","log","Game","props","canvasRef","React","createRef","statusRef","statusRef2","canvas","current","ctx","getContext","hex","WHITE","BLACK","RED","BLUE","hexagons","cellSize","j","center","getCenter","k","angle","Math","PI","cos","sin","setInterval","update","draw","_this","addEventListener","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","mousePressed","row","col","s60","strokeStyle","lineWidth","points","beginPath","moveTo","lineTo","stroke","coords","bottom","right","fillStyle","width","height","drawCell","color","arc","status","status2","textContent","classList","remove","styles","blue","add","red","cellCoords","getCell","undefined","move","ref","className","style","Component","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c0b786a5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Hex {\n    constructor() {\n        this.WIDTH = 11;\n        this.HEIGHT = 11;\n        this.currentPlayer = 1;\n        this.gameOver = false;\n        this.winner = 0;\n        // 0 empty 1 red, -1 blue\n        this.board = new Array(this.HEIGHT);\n        // for the dfs function, marks whether cell has been searched\n        this.searched = new Array(this.HEIGHT);\n        // list of all cells that have been searched\n        this.searchedQueue = [];\n        for (let i = 0; i < this.HEIGHT; i++) {\n            this.board[i] = new Array(this.WIDTH).fill(0);\n            this.searched[i] = new Array(this.WIDTH).fill(false);\n        }\n    }\n    move(r, c) {\n        if (this.board[r][c] !== 0 || this.gameOver || !this.inBound(r, c)) {\n            return false;\n        }\n        this.board[r][c] = this.currentPlayer;\n        if (this.findWin(r, c)) {\n            this.winner = this.currentPlayer;\n            this.gameOver = true;\n        }\n        this.currentPlayer *= -1;\n    }\n    findConnection(r, c, f) {\n        let result = this.dfs(r, c, f);\n        for (let cell of this.searchedQueue) {\n            this.searched[cell[0]][cell[1]] = false;\n        }\n        this.searchedQueue = [];\n        return result;\n    }\n    dfs(r, c, f) {\n        if (!this.inBound(r, c) || this.board[r][c] !== this.currentPlayer) {\n            return false;\n        }\n        if (f(r, c)) {\n            return true;\n        }\n        let found = false;\n        let neighbors = this.neighbors(r, c);\n        this.searched[r][c] = true;\n        this.searchedQueue.push([r, c]);\n        for (let neighbor of neighbors) {\n            if (this.inBound(...neighbor) && !this.searched[neighbor[0]][neighbor[1]]) {\n                if (this.dfs(...neighbor, f)) {\n                    found = true;\n                    break;\n                }\n            }\n        }\n        return found;\n    }\n    inBound(r, c) {\n        return r >= 0 && c >= 0 && r < this.HEIGHT && c < this.WIDTH;\n    }\n    neighbors(r, c) {\n        return [[r - 1, c], [r - 1, c + 1], [r, c + 1], [r + 1, c], [r + 1, c - 1], [r, c - 1]]\n    }\n    connectTop(r, c) {\n        return r <= 0;\n    }\n    connectBottom(r, c) {\n        return r >= this.HEIGHT - 1;\n    }\n    connectLeft(r, c) {\n        return c <= 0;\n    }\n    connectRight(r, c) {\n        return c >= this.WIDTH - 1;\n    }\n    findWin(r, c) {\n        let f1, f2;\n        // red connects top and bottom\n        if (this.currentPlayer > 0) {\n            f1 = (r, c) => this.connectTop(r, c);\n            f2 = (r, c) => this.connectBottom(r, c);\n        } else {\n            f1 = (r, c) => this.connectLeft(r, c);\n            f2 = (r, c) => this.connectRight(r, c);\n        }\n        let connect1 = this.findConnection(r, c, f1);\n        let connect2 = this.findConnection(r, c, f2);\n        console.log(connect1, connect2);\n        return connect1 && connect2;\n    }\n}\n","import React, { Component } from 'react'\nimport Hex from './Hex'\nimport styles from './css/game.module.scss'\n\n\nexport default class Game extends Component {\n    constructor(props) {\n        super(props)\n        this.canvasRef = React.createRef();\n        this.statusRef = React.createRef();\n        this.statusRef2 = React.createRef();\n    }\n    componentDidMount() {\n        this.canvas = this.canvasRef.current;\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.hex = new Hex();\n        this.WHITE = [255, 255, 255];\n        this.BLACK = [0, 0, 0];\n        this.RED = [255, 0, 0];\n        this.BLUE = [0, 0, 255];\n        this.hexagons = new Array(this.hex.HEIGHT);\n        this.cellSize = 80;\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            this.hexagons[i] = new Array(this.hex.WIDTH);\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                this.hexagons[i][j] = [];\n                let center = this.getCenter(i, j);\n                for (let k = 0; k < 6; k++) {\n                    let angle = k * Math.PI / 3 + Math.PI / 2;\n                    this.hexagons[i][j].push([center[0] + this.cellSize * Math.cos(angle), center[1] - this.cellSize * Math.sin(angle)]);\n                }\n            }\n        }\n        setInterval(() => {\n            this.update()\n            this.draw()\n        }, 1000 / 30);\n        let _this = this;\n        this.canvas.addEventListener('click', function (e) {\n            const rect = _this.canvas.getBoundingClientRect();\n            const x = 2 * (e.clientX - rect.left);\n            const y = 2 * (e.clientY - rect.top);\n            _this.mousePressed(x, y)\n        })\n    }\n    getCenter(row, col) {\n        let s60 = Math.sin(Math.PI / 3);\n        let x = this.cellSize * 1.5 + row * this.cellSize * s60 + col * 2 * this.cellSize * s60;\n        let y = this.cellSize * 1.5 + row * this.cellSize * 3 / 2;\n        return [x, y];\n    }\n    drawCell(row, col) {\n        this.ctx.strokeStyle = \"black\";\n        this.ctx.lineWidth = 2;\n        let points = this.hexagons[row][col];\n        this.ctx.beginPath();\n        for (let i = 0; i < 6; i++) {\n            this.ctx.moveTo(...points[i]);\n            this.ctx.lineTo(...points[(i + 1) % 6]);\n        }\n        this.ctx.stroke();\n        this.ctx.lineWidth = 5;\n        for (let i = 0; i < 6; i++) {\n            let coords = [[points[i][0], points[i][1]], [points[(i + 1) % 6][0], points[(i + 1) % 6][1]]];\n            let top = row === 0 && (i === 0 || i === 5);\n            let bottom = row === this.hex.HEIGHT - 1 && (i === 2 || i === 3);\n            let left = col === 0 && (i === 1 || i === 2);\n            let right = col === this.hex.WIDTH - 1 && (i === 4 || i === 5);\n            if (top || bottom) {\n                this.ctx.strokeStyle = \"red\";\n                this.ctx.beginPath();\n                this.ctx.moveTo(...coords[0]);\n                this.ctx.lineTo(...coords[1]);\n                this.ctx.stroke();\n            }\n            if (left || right) {\n                this.ctx.strokeStyle = \"blue\";\n                this.ctx.beginPath();\n                this.ctx.moveTo(...coords[0]);\n                this.ctx.lineTo(...coords[1]);\n                this.ctx.stroke();\n            }\n        }\n    }\n    draw() {\n        this.ctx.fillStyle = \"white\";\n        this.ctx.rect(0, 0, this.canvas.width, this.canvas.height);\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                this.ctx.fillStyle = \"white\";\n                this.drawCell(i, j);\n                let center = this.getCenter(i, j);\n                let color;\n                switch (this.hex.board[i][j]) {\n                    case 1:\n                        color = \"red\";\n                        break;\n                    case -1:\n                        color = \"blue\";\n                        break;\n                }\n                if (color) {\n                    this.ctx.strokeStyle = \"black\"\n                    this.ctx.lineWidth = 5;\n                    this.ctx.beginPath();\n                    this.ctx.arc(...center, this.cellSize / 2, 0, 2 * Math.PI);\n                    this.ctx.stroke();\n                    this.ctx.fillStyle = color;\n                    this.ctx.fill();\n                }\n            }\n        }\n    }\n    update() {\n        let status = this.statusRef.current;\n        let status2 = this.statusRef2.current;\n        if (!this.hex.gameOver) {\n            status.textContent = `${this.hex.currentPlayer > 0 ? \"Red\" : \"Blue\"}`\n            status2.textContent = \"'s Turn\";\n            if (this.hex.currentPlayer > 0) {\n                status.classList.remove(styles.blue);\n                status.classList.add(styles.red);\n            } else {\n                status.classList.remove(styles.red);\n                status.classList.add(styles.blue);\n            }\n        } else {\n            status.textContent = `${this.hex.winner > 0 ? \"Red\" : \"Blue\"}`\n            status2.textContent = \" Wins\";\n        }\n    }\n    getCell(x, y) {\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                let center = this.getCenter(i, j);\n                if ((x - center[0]) ** 2 + (y - center[1]) ** 2 <= 3 / 4 * this.cellSize ** 2) {\n                    return [i, j];\n                }\n            }\n        }\n    }\n    mousePressed(x, y) {\n        let cellCoords = this.getCell(x, y);\n        if (cellCoords === undefined) return;\n        this.hex.move(...cellCoords);\n    }\n    render() {\n        return (\n            <div>\n                <span ref={this.statusRef} className={styles.status}></span>\n                <span ref={this.statusRef2} className={styles.status}></span>\n                <br />\n                <canvas ref={this.canvasRef} width=\"2400\" height=\"1600\" style={{ width: \"1200px\", height: \"800px\" }}></canvas>\n            </div >\n        )\n    }\n}\n","import Game from './Game'\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"game_status__2JA7C\",\"red\":\"game_red__AsdVU\",\"blue\":\"game_blue__2EDZp\"};"],"sourceRoot":""}