{"version":3,"sources":["components/Hex.js","components/randomPlayer.js","components/Game.js","components/App.js","index.js","components/css/game.module.scss"],"names":["Hex","height","width","this","WIDTH","HEIGHT","currentPlayer","gameOver","winner","board","Array","searched","searchedQueue","i","fill","r","c","inBound","findWin","f","result","dfs","cell","found","neighbors","push","neighbor","f1","f2","connectTop","connectBottom","connectLeft","connectRight","connect1","findConnection","connect2","randomPlayer","hex","moves","j","length","move","Math","floor","random","Game","props","canvasRef","React","createRef","statusRef","statusRef2","heightRef","widthRef","redRef","blueRef","s","includes","parseInt","canvas","current","ctx","getContext","WHITE","BLACK","RED","BLUE","interval","setInterval","update","draw","_this","addEventListener","e","rect","getBoundingClientRect","ratioX","ratioY","x","clientX","left","y","clientY","top","mousePressed","isInteger","value","aiRed","aiBlue","hexagons","cellSize","center","getCenter","k","angle","PI","cos","sin","row","col","s60","strokeStyle","lineWidth","points","beginPath","moveTo","lineTo","stroke","coords","bottom","right","fillStyle","drawCell","color","arc","status","status2","textContent","classList","remove","styles","blue","add","red","player","playerString","console","log","cellCoords","getCell","undefined","class","container","controls","for","type","min","name","id","ref","defaultValue","onClick","startGame","game","className","style","Component","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c3bd8113.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Hex {\n    constructor(height = 11, width = 11) {\n        this.WIDTH = height;\n        this.HEIGHT = width;\n        this.currentPlayer = 1;\n        this.gameOver = false;\n        this.winner = 0;\n        // 0 empty 1 red, -1 blue\n        this.board = new Array(this.HEIGHT);\n        // for the dfs function, marks whether cell has been searched\n        this.searched = new Array(this.HEIGHT);\n        // list of all cells that have been searched\n        this.searchedQueue = [];\n        for (let i = 0; i < this.HEIGHT; i++) {\n            this.board[i] = new Array(this.WIDTH).fill(0);\n            this.searched[i] = new Array(this.WIDTH).fill(false);\n        }\n    }\n    move(r, c) {\n        if (this.board[r][c] !== 0 || this.gameOver || !this.inBound(r, c)) {\n            return false;\n        }\n        this.board[r][c] = this.currentPlayer;\n        if (this.findWin(r, c)) {\n            this.winner = this.currentPlayer;\n            this.gameOver = true;\n        }\n        this.currentPlayer *= -1;\n    }\n    findConnection(r, c, f) {\n        let result = this.dfs(r, c, f);\n        for (let cell of this.searchedQueue) {\n            this.searched[cell[0]][cell[1]] = false;\n        }\n        this.searchedQueue = [];\n        return result;\n    }\n    dfs(r, c, f) {\n        if (!this.inBound(r, c) || this.board[r][c] !== this.currentPlayer) {\n            return false;\n        }\n        if (f(r, c)) {\n            return true;\n        }\n        let found = false;\n        let neighbors = this.neighbors(r, c);\n        this.searched[r][c] = true;\n        this.searchedQueue.push([r, c]);\n        for (let neighbor of neighbors) {\n            if (this.inBound(...neighbor) && !this.searched[neighbor[0]][neighbor[1]]) {\n                if (this.dfs(...neighbor, f)) {\n                    found = true;\n                    break;\n                }\n            }\n        }\n        return found;\n    }\n    inBound(r, c) {\n        return r >= 0 && c >= 0 && r < this.HEIGHT && c < this.WIDTH;\n    }\n    neighbors(r, c) {\n        return [[r - 1, c], [r - 1, c + 1], [r, c + 1], [r + 1, c], [r + 1, c - 1], [r, c - 1]]\n    }\n    connectTop(r, c) {\n        return r <= 0;\n    }\n    connectBottom(r, c) {\n        return r >= this.HEIGHT - 1;\n    }\n    connectLeft(r, c) {\n        return c <= 0;\n    }\n    connectRight(r, c) {\n        return c >= this.WIDTH - 1;\n    }\n    findWin(r, c) {\n        let f1, f2;\n        // red connects top and bottom\n        if (this.currentPlayer > 0) {\n            f1 = (r, c) => this.connectTop(r, c);\n            f2 = (r, c) => this.connectBottom(r, c);\n        } else {\n            f1 = (r, c) => this.connectLeft(r, c);\n            f2 = (r, c) => this.connectRight(r, c);\n        }\n        let connect1 = this.findConnection(r, c, f1);\n        let connect2 = this.findConnection(r, c, f2);\n        return connect1 && connect2;\n    }\n}\n","export default class randomPlayer {\n    constructor(hex) {\n        this.hex = hex;\n    }\n    move() {\n        let moves = [];\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                if (!this.hex.board[i][j]) {\n                    moves.push([i, j])\n                }\n            }\n        }\n        if (!moves.length) return;\n        this.hex.move(...moves[Math.floor(Math.random() * moves.length)]);\n    }\n}\n","import React, { Component } from 'react'\nimport Hex from './Hex'\nimport styles from './css/game.module.scss'\nimport randomPlayer from './randomPlayer'\n\n\nexport default class Game extends Component {\n    constructor(props) {\n        super(props)\n        this.canvasRef = React.createRef();\n        this.statusRef = React.createRef();\n        this.statusRef2 = React.createRef();\n        this.heightRef = React.createRef();\n        this.widthRef = React.createRef();\n        this.redRef = React.createRef();\n        this.blueRef = React.createRef();\n    }\n    isInteger(s) {\n        for (let i = 0; i < s.length; i++) {\n            if (!\"0123456789\".includes(s[i])) {\n                return false;\n            }\n        }\n        return s.length > 0 && parseInt(s) !== 0;\n    }\n    componentDidMount() {\n        this.canvas = this.canvasRef.current;\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.WHITE = [255, 255, 255];\n        this.BLACK = [0, 0, 0];\n        this.RED = [255, 0, 0];\n        this.BLUE = [0, 0, 255];\n        this.interval = setInterval(() => {\n            this.update()\n            this.draw()\n        }, 1000 / 30);\n        let _this = this;\n        this.canvas.addEventListener('click', function (e) {\n            const rect = _this.canvas.getBoundingClientRect();\n            const ratioX = _this.canvas.width / rect.width;\n            const ratioY = _this.canvas.height / rect.height;\n            const x = ratioX * (e.clientX - rect.left);\n            const y = ratioY * (e.clientY - rect.top);\n            _this.mousePressed(x, y)\n        })\n    }\n    startGame() {\n        if (!this.isInteger(this.heightRef.current.value) || !this.isInteger(this.widthRef.current.value)) {\n            return;\n        }\n        this.aiRed = this.redRef.current.value;\n        this.aiBlue = this.blueRef.current.value;\n        let height = parseInt(this.heightRef.current.value);\n        let width = parseInt(this.widthRef.current.value);\n        this.hex = new Hex(height, width);\n        this.hexagons = new Array(this.hex.HEIGHT);\n        this.cellSize = 80;\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            this.hexagons[i] = new Array(this.hex.WIDTH);\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                this.hexagons[i][j] = [];\n                let center = this.getCenter(i, j);\n                for (let k = 0; k < 6; k++) {\n                    let angle = k * Math.PI / 3 + Math.PI / 2;\n                    this.hexagons[i][j].push([center[0] + this.cellSize * Math.cos(angle), center[1] - this.cellSize * Math.sin(angle)]);\n                }\n            }\n        }\n    }\n    getCenter(row, col) {\n        let s60 = Math.sin(Math.PI / 3);\n        let x = this.cellSize * 1.5 + row * this.cellSize * s60 + col * 2 * this.cellSize * s60;\n        let y = this.cellSize * 1.5 + row * this.cellSize * 3 / 2;\n        return [x, y];\n    }\n    drawCell(row, col) {\n        this.ctx.strokeStyle = \"black\";\n        this.ctx.lineWidth = 2;\n        let points = this.hexagons[row][col];\n        this.ctx.beginPath();\n        for (let i = 0; i < 6; i++) {\n            this.ctx.moveTo(...points[i]);\n            this.ctx.lineTo(...points[(i + 1) % 6]);\n        }\n        this.ctx.stroke();\n        this.ctx.lineWidth = 5;\n        for (let i = 0; i < 6; i++) {\n            let coords = [[points[i][0], points[i][1]], [points[(i + 1) % 6][0], points[(i + 1) % 6][1]]];\n            let top = row === 0 && (i === 0 || i === 5);\n            let bottom = row === this.hex.HEIGHT - 1 && (i === 2 || i === 3);\n            let left = col === 0 && (i === 1 || i === 2);\n            let right = col === this.hex.WIDTH - 1 && (i === 4 || i === 5);\n            if (top || bottom) {\n                this.ctx.strokeStyle = \"red\";\n                this.ctx.beginPath();\n                this.ctx.moveTo(...coords[0]);\n                this.ctx.lineTo(...coords[1]);\n                this.ctx.stroke();\n            }\n            if (left || right) {\n                this.ctx.strokeStyle = \"blue\";\n                this.ctx.beginPath();\n                this.ctx.moveTo(...coords[0]);\n                this.ctx.lineTo(...coords[1]);\n                this.ctx.stroke();\n            }\n        }\n    }\n    draw() {\n        if (!this.hex) return;\n        this.ctx.fillStyle = \"white\";\n        this.ctx.rect(0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.fill();\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                this.ctx.fillStyle = \"white\";\n                this.drawCell(i, j);\n                let center = this.getCenter(i, j);\n                let color;\n                switch (this.hex.board[i][j]) {\n                    case 1:\n                        color = \"red\";\n                        break;\n                    case -1:\n                        color = \"blue\";\n                        break;\n                }\n                if (color) {\n                    this.ctx.strokeStyle = \"black\"\n                    this.ctx.lineWidth = 5;\n                    this.ctx.beginPath();\n                    this.ctx.arc(...center, this.cellSize / 2, 0, 2 * Math.PI);\n                    this.ctx.stroke();\n                    this.ctx.fillStyle = color;\n                    this.ctx.fill();\n                }\n            }\n        }\n    }\n    update() {\n        let status = this.statusRef.current;\n        let status2 = this.statusRef2.current;\n        if (!this.hex) {\n            status.textContent = status2.textContent = \"\";\n            return;\n        }\n        this.move();\n        if (!this.hex.gameOver) {\n            status.textContent = `${this.hex.currentPlayer > 0 ? \"Red\" : \"Blue\"}`\n            status2.textContent = \"'s Turn\";\n            if (this.hex.currentPlayer > 0) {\n                status.classList.remove(styles.blue);\n                status.classList.add(styles.red);\n            } else {\n                status.classList.remove(styles.red);\n                status.classList.add(styles.blue);\n            }\n        } else {\n            status.textContent = `${this.hex.winner > 0 ? \"Red\" : \"Blue\"}`\n            status2.textContent = \" Wins\";\n        }\n    }\n    move() {\n        if (this.hex.gameOver) return;\n        let playerString = this.hex.currentPlayer == 1 ? this.aiRed : this.aiBlue;\n        let player;\n        if (playerString === \"manual\") return;\n        switch (playerString) {\n            case \"random\":\n                player = new randomPlayer(this.hex);\n                break;\n        }\n        console.log(playerString);\n        player.move();\n    }\n    getCell(x, y) {\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                let center = this.getCenter(i, j);\n                if ((x - center[0]) ** 2 + (y - center[1]) ** 2 <= 3 / 4 * this.cellSize ** 2) {\n                    return [i, j];\n                }\n            }\n        }\n    }\n    mousePressed(x, y) {\n        let cellCoords = this.getCell(x, y);\n        if (cellCoords === undefined) return;\n        this.hex.move(...cellCoords);\n    }\n    render() {\n        return (\n            <div class={styles.container}>\n                <div class={styles.controls}>\n                    <label for=\"height\">Height:</label>\n                    <input type=\"number\" min=\"1\" name=\"height\" id=\"height\" ref={this.heightRef} defaultValue=\"6\" />\n                    <label for=\"width\">Width:</label>\n                    <input type=\"number\" min=\"1\" name=\"width\" id=\"width\" ref={this.widthRef} defaultValue=\"6\" />\n                    <br />\n                    <label for=\"red\">Red:</label>\n                    <select name=\"red\" id=\"red\" ref={this.redRef}>\n                        <option value=\"manual\">Manual</option>\n                        <option value=\"random\">Random</option>\n                        {/* <option value=\"mcts\">MCTS</option> */}\n                    </select>\n                    <br />\n                    <label for=\"blue\">Blue:</label>\n                    <select name=\"blue\" id=\"blue\" ref={this.blueRef}>\n                        <option value=\"manual\">Manual</option>\n                        <option value=\"random\">Random</option>\n                        {/* <option value=\"mcts\">MCTS</option> */}\n                    </select>\n                    <br />\n                    <button onClick={() => this.startGame()}>Start game</button>\n                </div>\n                <div class={styles.game}>\n                    <span ref={this.statusRef} className={styles.status}></span>\n                    <span ref={this.statusRef2} className={styles.status}></span>\n                    <br />\n                    <canvas ref={this.canvasRef} width=\"2400\" height=\"1600\" style={{ width: \"60vw\" }}></canvas>\n                </div >\n            </div>\n        )\n    }\n}\n","import Game from './Game'\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"game_status__2JA7C\",\"red\":\"game_red__AsdVU\",\"blue\":\"game_blue__2EDZp\",\"container\":\"game_container__2ViGJ\",\"controls\":\"game_controls__2ZQJd\"};"],"sourceRoot":""}