{"version":3,"sources":["components/Hex.js","components/RandomPlayer.js","components/Mcts.js","components/Game.js","components/App.js","index.js","components/css/game.module.scss"],"names":["Hex","width","height","this","WIDTH","HEIGHT","currentPlayer","gameOver","winner","board","Array","searched","searchedQueue","i","fill","moveHistory","hex","j","r","c","inBound","push","findWin","move","pop","f","result","dfs","cell","found","neighbors","neighbor","f1","f2","connectTop","connectBottom","connectLeft","connectRight","connect1","findConnection","connect2","RandomPlayer","moves","length","Math","floor","random","prototype","shuffle","Status","Node","parent","undefined","moveIndex","wins","games","copy","childMoves","children","status","sqrt","log","Infinity","best","child","evaluate","select","childHex","backpropagate","simulate","copyHex","Mcts","rootNode","simulations","node","expand","bestChild","console","bestMove","Game","props","canvasRef","React","createRef","statusRef","statusRef2","heightRef","widthRef","redRef","blueRef","s","includes","parseInt","canvas","current","ctx","getContext","WHITE","BLACK","RED","BLUE","interval","setInterval","update","draw","_this","addEventListener","e","rect","getBoundingClientRect","ratioX","ratioY","x","clientX","left","y","clientY","top","mousePressed","isInteger","value","aiRed","aiBlue","hexagons","cellSize","max","center","getCenter","k","angle","PI","cos","sin","row","col","s60","strokeStyle","lineWidth","points","beginPath","moveTo","lineTo","stroke","coords","bottom","right","updatePlayer","fillStyle","drawCell","color","arc","status2","textContent","classList","remove","styles","blue","add","red","playerClass","playerString","manualMove","times","undo","cellCoords","getCell","class","container","controlsContainer","controls","for","type","min","name","id","ref","defaultValue","onClick","startGame","undoButton","game","className","style","Component","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.193beeec.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Hex {\n    constructor(width = 11, height = 11) {\n        this.WIDTH = width;\n        this.HEIGHT = height;\n        this.currentPlayer = 1;\n        this.gameOver = false;\n        this.winner = 0;\n        // 0 empty 1 red, -1 blue\n        this.board = new Array(this.HEIGHT);\n        // for the dfs function, marks whether cell has been searched\n        this.searched = new Array(this.HEIGHT);\n        // list of all cells that have been searched\n        this.searchedQueue = [];\n        for (let i = 0; i < this.HEIGHT; i++) {\n            this.board[i] = new Array(this.WIDTH).fill(0);\n            this.searched[i] = new Array(this.WIDTH).fill(false);\n        }\n        this.moveHistory = [];\n    }\n    copy() {\n        let hex = new Hex(this.WIDTH, this.HEIGHT);\n        hex.currentPlayer = this.currentPlayer;\n        hex.gameOver = this.gameOver;\n        hex.winner = this.winner;\n        for (let i = 0; i < hex.HEIGHT; i++) {\n            for (let j = 0; j < hex.WIDTH; j++) {\n                hex.board[i][j] = this.board[i][j];\n            }\n        }\n        return hex;\n    }\n    move(r, c) {\n        if (this.board[r][c] !== 0 || this.gameOver || !this.inBound(r, c)) {\n            return false;\n        }\n        this.board[r][c] = this.currentPlayer;\n        this.moveHistory.push([r, c]);\n        if (this.findWin(r, c)) {\n            this.winner = this.currentPlayer;\n            this.gameOver = true;\n        }\n        this.currentPlayer *= -1;\n    }\n    undo() {\n        let move = this.moveHistory.pop();\n        if (move) {\n            this.gameOver = false;\n            this.currentPlayer *= -1;\n            this.winner = 0;\n            this.board[move[0]][move[1]] = 0;\n        }\n    }\n    findConnection(r, c, f) {\n        let result = this.dfs(r, c, f);\n        for (let cell of this.searchedQueue) {\n            this.searched[cell[0]][cell[1]] = false;\n        }\n        this.searchedQueue = [];\n        return result;\n    }\n    dfs(r, c, f) {\n        if (!this.inBound(r, c) || this.board[r][c] !== this.currentPlayer) {\n            return false;\n        }\n        if (f(r, c)) {\n            return true;\n        }\n        let found = false;\n        let neighbors = this.neighbors(r, c);\n        this.searched[r][c] = true;\n        this.searchedQueue.push([r, c]);\n        for (let neighbor of neighbors) {\n            if (this.inBound(...neighbor) && !this.searched[neighbor[0]][neighbor[1]]) {\n                if (this.dfs(...neighbor, f)) {\n                    found = true;\n                    break;\n                }\n            }\n        }\n        return found;\n    }\n    inBound(r, c) {\n        return r >= 0 && c >= 0 && r < this.HEIGHT && c < this.WIDTH;\n    }\n    neighbors(r, c) {\n        return [[r - 1, c], [r - 1, c + 1], [r, c + 1], [r + 1, c], [r + 1, c - 1], [r, c - 1]]\n    }\n    connectTop(r, c) {\n        return r <= 0;\n    }\n    connectBottom(r, c) {\n        return r >= this.HEIGHT - 1;\n    }\n    connectLeft(r, c) {\n        return c <= 0;\n    }\n    connectRight(r, c) {\n        return c >= this.WIDTH - 1;\n    }\n    findWin(r, c) {\n        let f1, f2;\n        // red connects top and bottom\n        if (this.currentPlayer > 0) {\n            f1 = (r, c) => this.connectTop(r, c);\n            f2 = (r, c) => this.connectBottom(r, c);\n        } else {\n            f1 = (r, c) => this.connectLeft(r, c);\n            f2 = (r, c) => this.connectRight(r, c);\n        }\n        let connect1 = this.findConnection(r, c, f1);\n        let connect2 = this.findConnection(r, c, f2);\n        return connect1 && connect2;\n    }\n}\n","export default class RandomPlayer {\n    constructor(hex) {\n        this.hex = hex;\n    }\n    move() {\n        let moves = [];\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                if (!this.hex.board[i][j]) {\n                    moves.push([i, j])\n                }\n            }\n        }\n        if (!moves.length) return;\n        this.hex.move(...moves[Math.floor(Math.random() * moves.length)]);\n    }\n}\n","import Hex from './Hex'\n\nArray.prototype.shuffle = function () {\n    for (let i = 0; i < this.length; i++) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [this[i], this[j]] = [this[j], this[i]];\n    }\n}\n\nvar Status = { WIN: 1, LOSS: -1, INDETERMINATE: 0 }\n\nclass Node {\n    constructor(hex, parent = undefined, moveIndex = undefined) {\n        this.parent = parent;\n        this.wins = 0;\n        this.games = 0;\n        this.moveIndex = moveIndex;\n        this.hex = hex.copy();\n        this.childMoves = [];\n        this.children = [];\n        this.status = Status.INDETERMINATE;\n        if (hex.gameOver) {\n            // It is a win for the parent\n            this.status = Status.WIN;\n        }\n        if (!this.hex.gameOver) {\n            for (let i = 0; i < this.hex.HEIGHT; i++) {\n                for (let j = 0; j < this.hex.WIDTH; j++) {\n                    if (this.hex.board[i][j] === 0) {\n                        this.childMoves.push([i, j]);\n                    }\n                }\n            }\n            this.childMoves.shuffle();\n        }\n    }\n    isLeaf() {\n        return this.childMoves.length === 0;\n    }\n    evaluate() {\n        if (this.status == Status.INDETERMINATE) {\n            return this.wins / this.games + Math.sqrt(Math.log(this.parent.games) / this.games);\n        }\n        return Infinity * this.status;\n    }\n    select() {\n        if (this.children.length === 0 || this.children.length < this.childMoves.length)\n            return this;\n        let best = this.children[0];\n        for (let child of this.children) {\n            if (child.evaluate() > best.evaluate()) {\n                best = child;\n            }\n        }\n        return best.select();\n    }\n    expand(games = 3) {\n        if (this.children.length === this.childMoves.length) {\n            for (let i = 0; i < games; i++) {\n                this.backpropagate(this.simulate());\n            }\n            return;\n        }\n        let move = this.childMoves[this.children.length];\n        let childHex = this.hex.copy();\n        childHex.move(...move);\n        let child = new Node(childHex, this, move);\n        this.children.push(child);\n        if (child.status === Status.WIN) {\n            this.status = Status.LOSS;\n        }\n        for (let i = 0; i < games; i++) {\n            child.backpropagate(child.simulate());\n        }\n        return child;\n    }\n    simulate() {\n        let moves = [...this.childMoves];\n        let copyHex = this.hex.copy();\n        moves.shuffle();\n        for (let move of moves) {\n            if (copyHex.gameOver) break;\n            copyHex.move(...move);\n        }\n        return copyHex.winner;\n    }\n    backpropagate(winner) {\n        this.games++;\n        if (this.parent !== undefined) {\n            this.wins += winner === this.parent.hex.currentPlayer;\n            this.parent.backpropagate(winner);\n        }\n    }\n}\n\nexport default class Mcts {\n    constructor(hex) {\n        this.hex = hex;\n        this.rootNode = new Node(hex);\n    }\n    bestMove(simulations = 4000) {\n        if (this.rootNode.gameOver) {\n            return;\n        }\n        while (simulations--) {\n            let node = this.rootNode.select();\n            node.expand();\n        }\n        let bestChild = this.rootNode.children[0];\n        for (let child of this.rootNode.children) {\n            if (child.games > bestChild.games) {\n                bestChild = child;\n            }\n        }\n        console.log(this.rootNode);\n        return bestChild.moveIndex;\n    }\n    move() {\n        let move = this.bestMove();\n        this.hex.move(...move);\n    }\n}","import React, { Component } from 'react'\nimport Hex from './Hex'\nimport styles from './css/game.module.scss'\nimport RandomPlayer from './RandomPlayer'\nimport Mcts from './Mcts'\n\n\nexport default class Game extends Component {\n    constructor(props) {\n        super(props)\n        this.canvasRef = React.createRef();\n        this.statusRef = React.createRef();\n        this.statusRef2 = React.createRef();\n        this.heightRef = React.createRef();\n        this.widthRef = React.createRef();\n        this.redRef = React.createRef();\n        this.blueRef = React.createRef();\n    }\n    isInteger(s) {\n        for (let i = 0; i < s.length; i++) {\n            if (!\"0123456789\".includes(s[i])) {\n                return false;\n            }\n        }\n        return s.length > 0 && parseInt(s) !== 0;\n    }\n    componentDidMount() {\n        this.canvas = this.canvasRef.current;\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.WHITE = [255, 255, 255];\n        this.BLACK = [0, 0, 0];\n        this.RED = [255, 0, 0];\n        this.BLUE = [0, 0, 255];\n        this.interval = setInterval(() => {\n            this.update()\n            this.draw()\n        }, 1000 / 30);\n        let _this = this;\n        this.canvas.addEventListener('click', function (e) {\n            const rect = _this.canvas.getBoundingClientRect();\n            const ratioX = _this.canvas.width / rect.width;\n            const ratioY = _this.canvas.height / rect.height;\n            const x = ratioX * (e.clientX - rect.left);\n            const y = ratioY * (e.clientY - rect.top);\n            _this.mousePressed(x, y)\n        })\n    }\n    startGame() {\n        if (!this.isInteger(this.heightRef.current.value) || !this.isInteger(this.widthRef.current.value)) {\n            return;\n        }\n        this.aiRed = this.redRef.current.value;\n        this.aiBlue = this.blueRef.current.value;\n        let height = parseInt(this.heightRef.current.value);\n        let width = parseInt(this.widthRef.current.value);\n        this.hex = new Hex(width, height);\n        this.hexagons = new Array(this.hex.HEIGHT);\n        this.cellSize = this.canvas.width / (Math.max(this.hex.WIDTH, this.hex.HEIGHT) * 1.5 * 2);\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            this.hexagons[i] = new Array(this.hex.WIDTH);\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                this.hexagons[i][j] = [];\n                let center = this.getCenter(i, j);\n                for (let k = 0; k < 6; k++) {\n                    let angle = k * Math.PI / 3 + Math.PI / 2;\n                    this.hexagons[i][j].push([center[0] + this.cellSize * Math.cos(angle), center[1] - this.cellSize * Math.sin(angle)]);\n                }\n            }\n        }\n        this.draw();\n    }\n    getCenter(row, col) {\n        let s60 = Math.sin(Math.PI / 3);\n        let x = this.cellSize * 1.5 + row * this.cellSize * s60 + col * 2 * this.cellSize * s60;\n        let y = this.cellSize * 1.5 + row * this.cellSize * 3 / 2;\n        return [x, y];\n    }\n    drawCell(row, col) {\n        this.ctx.strokeStyle = \"black\";\n        this.ctx.lineWidth = 2;\n        let points = this.hexagons[row][col];\n        this.ctx.beginPath();\n        for (let i = 0; i < 6; i++) {\n            this.ctx.moveTo(...points[i]);\n            this.ctx.lineTo(...points[(i + 1) % 6]);\n        }\n        this.ctx.stroke();\n        this.ctx.lineWidth = 5;\n        for (let i = 0; i < 6; i++) {\n            let coords = [[points[i][0], points[i][1]], [points[(i + 1) % 6][0], points[(i + 1) % 6][1]]];\n            let top = row === 0 && (i === 0 || i === 5);\n            let bottom = row === this.hex.HEIGHT - 1 && (i === 2 || i === 3);\n            let left = col === 0 && (i === 1 || i === 2);\n            let right = col === this.hex.WIDTH - 1 && (i === 4 || i === 5);\n            if (top || bottom) {\n                this.ctx.strokeStyle = \"red\";\n                this.ctx.beginPath();\n                this.ctx.moveTo(...coords[0]);\n                this.ctx.lineTo(...coords[1]);\n                this.ctx.stroke();\n            }\n            if (left || right) {\n                this.ctx.strokeStyle = \"blue\";\n                this.ctx.beginPath();\n                this.ctx.moveTo(...coords[0]);\n                this.ctx.lineTo(...coords[1]);\n                this.ctx.stroke();\n            }\n        }\n    }\n    draw() {\n        this.updatePlayer();\n        if (!this.hex) return;\n        this.ctx.fillStyle = \"white\";\n        this.ctx.rect(0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.fill();\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                this.ctx.fillStyle = \"white\";\n                this.drawCell(i, j);\n                let center = this.getCenter(i, j);\n                let color;\n                switch (this.hex.board[i][j]) {\n                    case 1:\n                        color = \"red\";\n                        break;\n                    case -1:\n                        color = \"blue\";\n                        break;\n                }\n                if (color) {\n                    this.ctx.strokeStyle = \"black\"\n                    this.ctx.lineWidth = 5;\n                    this.ctx.beginPath();\n                    this.ctx.arc(...center, this.cellSize / 2, 0, 2 * Math.PI);\n                    this.ctx.stroke();\n                    this.ctx.fillStyle = color;\n                    this.ctx.fill();\n                }\n            }\n        }\n    }\n    updatePlayer() {\n        let status = this.statusRef.current;\n        let status2 = this.statusRef2.current;\n        if (!this.hex) {\n            status.textContent = status2.textContent = \"\";\n            return;\n        }\n        if (!this.hex.gameOver) {\n            status.textContent = `${this.hex.currentPlayer > 0 ? \"Red\" : \"Blue\"}`\n            status2.textContent = \"'s Turn\";\n            if (this.hex.currentPlayer > 0) {\n                status.classList.remove(styles.blue);\n                status.classList.add(styles.red);\n            } else {\n                status.classList.remove(styles.red);\n                status.classList.add(styles.blue);\n            }\n        } else {\n            status.textContent = `${this.hex.winner > 0 ? \"Red\" : \"Blue\"}`\n            status2.textContent = \" Wins\";\n            if (this.hex.winner > 0) {\n                status.classList.remove(styles.blue);\n                status.classList.add(styles.red);\n            } else {\n                status.classList.remove(styles.red);\n                status.classList.add(styles.blue);\n            }\n        }\n    }\n    update() {\n        this.move();\n    }\n    move() {\n        if (!this.hex || this.hex.gameOver) return;\n        let playerString = this.hex.currentPlayer == 1 ? this.aiRed : this.aiBlue;\n        let playerClass;\n        if (playerString === \"manual\") {\n            if (this.manualMove) {\n                this.hex.move(...this.manualMove);\n                this.manualMove = null;\n            }\n            return;\n        }\n        switch (playerString) {\n            case \"random\":\n                playerClass = RandomPlayer;\n                break;\n            case \"mcts\":\n                playerClass = Mcts;\n                break;\n        }\n        let player = new playerClass(this.hex);\n        player.move();\n    }\n    undo(times = 1) {\n        if (!this.hex) return;\n        for (let i = 0; i < times; i++) {\n            this.hex.undo();\n        }\n    }\n    getCell(x, y) {\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                let center = this.getCenter(i, j);\n                if ((x - center[0]) ** 2 + (y - center[1]) ** 2 <= 3 / 4 * this.cellSize ** 2) {\n                    return [i, j];\n                }\n            }\n        }\n    }\n    mousePressed(x, y) {\n        let cellCoords = this.getCell(x, y);\n        if (cellCoords === undefined) return;\n        this.manualMove = cellCoords;\n    }\n    render() {\n        return (\n            <div class={styles.container}>\n                <div class={styles.controlsContainer}>\n                    <div class={styles.controls}>\n                        <h1>Hex</h1>\n                        <h2>Aaron He</h2>\n                        <label for=\"height\">Height:</label>\n                        <input type=\"number\" min=\"1\" name=\"height\" id=\"height\" ref={this.heightRef} defaultValue=\"6\" />\n                        <label for=\"width\">Width:</label>\n                        <input type=\"number\" min=\"1\" name=\"width\" id=\"width\" ref={this.widthRef} defaultValue=\"6\" />\n                        <br />\n                        <label for=\"red\">Red:</label>\n                        <select name=\"red\" id=\"red\" ref={this.redRef}>\n                            <option value=\"manual\">Manual</option>\n                            <option value=\"random\">Random</option>\n                            <option value=\"mcts\">MCTS</option>\n                        </select>\n                        <label for=\"blue\">Blue:</label>\n                        <select name=\"blue\" id=\"blue\" ref={this.blueRef}>\n                            <option value=\"manual\">Manual</option>\n                            <option value=\"random\">Random</option>\n                            <option value=\"mcts\">MCTS</option>\n                        </select>\n                        <br />\n                        <button onClick={() => this.startGame()}>Start game</button>\n                        <br />\n                        <button onClick={() => this.undo()} class={styles.undoButton}>Undo</button>\n                        <button onClick={() => this.undo(2)}>Undo 2</button>\n                    </div>\n                </div>\n                <div class={styles.game}>\n                    <span ref={this.statusRef} className={`${styles.status} ${styles.statusRef}`}></span>\n                    <span ref={this.statusRef2} className={styles.status}></span>\n                    <br />\n                    <canvas ref={this.canvasRef} width=\"2400\" height=\"1600\" style={{ width: \"70vw\" }}></canvas>\n                </div >\n            </div>\n        )\n    }\n}\n","import Game from './Game'\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"game_status__2JA7C\",\"statusRef\":\"game_statusRef__2spNS\",\"red\":\"game_red__AsdVU\",\"blue\":\"game_blue__2EDZp\",\"container\":\"game_container__2ViGJ\",\"controlsContainer\":\"game_controlsContainer__3hr-m\",\"controls\":\"game_controls__2ZQJd\",\"undoButton\":\"game_undoButton__300GP\"};"],"sourceRoot":""}