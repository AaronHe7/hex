{"version":3,"sources":["components/Hex.js","components/RandomPlayer.js","components/Mcts.js","components/Game.js","components/App.js","index.js","components/css/game.module.scss"],"names":["Hex","width","height","this","WIDTH","HEIGHT","currentPlayer","gameOver","winner","board","Array","searched","searchedQueue","i","fill","moveHistory","hex","move","push","r","c","inBound","findWin","pop","f","result","dfs","cell","visited","found","neighbors","neighbor","f1","f2","Math","ceil","length","connectTop","connectBottom","connectLeft","connectRight","connect1","findConnection","connect2","RandomPlayer","moves","j","floor","random","prototype","shuffle","Status","Node","parent","undefined","moveIndex","wins","games","copy","childMoves","children","status","sqrt","log","Infinity","best","child","evaluate","select","childHex","backpropagate","simulate","undo","Mcts","rootNode","simulations","node","expand","bestChild","console","time","Date","getTime","bestMove","Game","props","canvasRef","React","createRef","statusRef","statusRef2","heightRef","widthRef","redRef","blueRef","s","includes","parseInt","canvas","current","ctx","getContext","WHITE","BLACK","RED","BLUE","interval","setInterval","update","draw","_this","addEventListener","e","rect","getBoundingClientRect","ratioX","ratioY","x","clientX","left","y","clientY","top","mousePressed","isInteger","value","aiRed","aiBlue","hexagons","cellSize","max","center","getCenter","k","angle","PI","cos","sin","row","col","s60","strokeStyle","lineWidth","points","beginPath","moveTo","lineTo","stroke","coords","bottom","right","updatePlayer","fillStyle","drawCell","color","arc","status2","textContent","classList","remove","styles","blue","add","red","playerClass","playerString","manualMove","times","cellCoords","getCell","class","container","controlsContainer","controls","for","type","min","name","id","ref","defaultValue","onClick","startGame","undoButton","game","className","style","Component","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c41a55f8.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Hex {\n    constructor(width = 11, height = 11) {\n        this.WIDTH = width;\n        this.HEIGHT = height;\n        this.currentPlayer = 1;\n        this.gameOver = false;\n        this.winner = 0;\n        // 0 empty 1 red, -1 blue\n        this.board = new Array(this.HEIGHT);\n        // for the dfs function, marks whether cell has been searched\n        this.searched = new Array(this.HEIGHT);\n        // list of all cells that have been searched\n        this.searchedQueue = [];\n        for (let i = 0; i < this.HEIGHT; i++) {\n            this.board[i] = new Array(this.WIDTH).fill(0);\n            this.searched[i] = new Array(this.WIDTH).fill(false);\n        }\n        this.moveHistory = [];\n    }\n    copy() {\n        let hex = new Hex(this.WIDTH, this.HEIGHT);\n        hex.currentPlayer = this.currentPlayer;\n        hex.gameOver = this.gameOver;\n        hex.winner = this.winner;\n        for (let move of this.moveHistory) {\n            hex.board[move[0]][move[1]] = this.board[move[0]][move[1]];\n            hex.moveHistory.push([...move]);\n        }\n        return hex;\n    }\n    move(r, c) {\n        if (this.board[r][c] !== 0 || this.gameOver || !this.inBound(r, c)) {\n            return false;\n        }\n        this.board[r][c] = this.currentPlayer;\n        this.moveHistory.push([r, c]);\n        if (this.findWin(r, c)) {\n            this.winner = this.currentPlayer;\n            this.gameOver = true;\n        }\n        this.currentPlayer *= -1;\n    }\n    undo() {\n        let move = this.moveHistory.pop();\n        if (move) {\n            this.gameOver = false;\n            this.currentPlayer *= -1;\n            this.winner = 0;\n            this.board[move[0]][move[1]] = 0;\n        }\n    }\n    findConnection(r, c, f) {\n        let result = this.dfs(r, c, f);\n        for (let cell of this.searchedQueue) {\n            this.searched[cell[0]][cell[1]] = false;\n        }\n        this.searchedQueue = [];\n        return result;\n    }\n    dfs(r, c, f) {\n        this.visited++;\n        if (!this.inBound(r, c) || this.board[r][c] !== this.currentPlayer) {\n            return false;\n        }\n        if (f(r, c)) {\n            return true;\n        }\n        let found = false;\n        let neighbors = this.neighbors(r, c);\n        this.searched[r][c] = true;\n        this.searchedQueue.push([r, c]);\n        for (let neighbor of neighbors) {\n            if (this.inBound(...neighbor) && !this.searched[neighbor[0]][neighbor[1]]) {\n                if (this.dfs(...neighbor, f)) {\n                    found = true;\n                    break;\n                }\n            }\n        }\n        return found;\n    }\n    inBound(r, c) {\n        return r >= 0 && c >= 0 && r < this.HEIGHT && c < this.WIDTH;\n    }\n    neighbors(r, c) {\n        return [[r - 1, c], [r - 1, c + 1], [r, c + 1], [r + 1, c], [r + 1, c - 1], [r, c - 1]]\n    }\n    connectTop(r, c) {\n        return r <= 0;\n    }\n    connectBottom(r, c) {\n        return r >= this.HEIGHT - 1;\n    }\n    connectLeft(r, c) {\n        return c <= 0;\n    }\n    connectRight(r, c) {\n        return c >= this.WIDTH - 1;\n    }\n    findWin(r, c) {\n        let numMoves = Math.ceil(this.moveHistory.length / 2);\n        if (numMoves < (this.currentPlayer > 0 ? this.HEIGHT : this.WIDTH)) {\n            return false;\n        }\n        let f1, f2;\n        // red connects top and bottom\n        if (this.currentPlayer > 0) {\n            f1 = (r, c) => this.connectTop(r, c);\n            f2 = (r, c) => this.connectBottom(r, c);\n        } else {\n            f1 = (r, c) => this.connectLeft(r, c);\n            f2 = (r, c) => this.connectRight(r, c);\n        }\n        let connect1 = this.findConnection(r, c, f1);\n        if (!connect1) return false;\n        let connect2 = this.findConnection(r, c, f2);\n        return connect1 && connect2;\n    }\n}\n","export default class RandomPlayer {\n    constructor(hex) {\n        this.hex = hex;\n    }\n    move() {\n        let moves = [];\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                if (!this.hex.board[i][j]) {\n                    moves.push([i, j])\n                }\n            }\n        }\n        if (!moves.length) return;\n        // cloning move by move avg ~750ms\n        this.hex.move(...moves[Math.floor(Math.random() * moves.length)]);\n    }\n}\n","import Hex from './Hex'\n\nArray.prototype.shuffle = function () {\n    for (let i = 0; i < this.length; i++) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [this[i], this[j]] = [this[j], this[i]];\n    }\n}\n\nvar Status = { WIN: 1, LOSS: -1, INDETERMINATE: 0 }\n\nclass Node {\n    constructor(hex, parent = undefined, moveIndex = undefined) {\n        this.parent = parent;\n        this.wins = 0;\n        this.games = 0;\n        this.moveIndex = moveIndex;\n        this.hex = hex.copy();\n        this.childMoves = [];\n        this.children = [];\n        this.status = Status.INDETERMINATE;\n        if (hex.gameOver) {\n            // It is a win for the parent\n            this.status = Status.WIN;\n        }\n        if (!this.hex.gameOver) {\n            for (let i = 0; i < this.hex.HEIGHT; i++) {\n                for (let j = 0; j < this.hex.WIDTH; j++) {\n                    if (this.hex.board[i][j] === 0) {\n                        this.childMoves.push([i, j]);\n                    }\n                }\n            }\n            this.childMoves.shuffle();\n        }\n    }\n    isLeaf() {\n        return this.childMoves.length === 0;\n    }\n    evaluate() {\n        if (this.status == Status.INDETERMINATE) {\n            return this.wins / this.games + Math.sqrt(Math.log(this.parent.games) / this.games);\n        }\n        return Infinity * this.status;\n    }\n    select() {\n        if (this.children.length === 0 || this.children.length < this.childMoves.length)\n            return this;\n        let best = this.children[0];\n        for (let child of this.children) {\n            if (child.evaluate() > best.evaluate()) {\n                best = child;\n            }\n        }\n        return best.select();\n    }\n    expand(games = 3) {\n        if (this.children.length === this.childMoves.length) {\n            for (let i = 0; i < games; i++) {\n                this.backpropagate(this.simulate());\n            }\n            return;\n        }\n        let move = this.childMoves[this.children.length];\n        let childHex = this.hex.copy();\n        childHex.move(...move);\n        let child = new Node(childHex, this, move);\n        this.children.push(child);\n        if (child.status === Status.WIN) {\n            this.status = Status.LOSS;\n        }\n        for (let i = 0; i < games; i++) {\n            child.backpropagate(child.simulate());\n        }\n        return child;\n    }\n    simulate() {\n        let moves = [...this.childMoves];\n        moves.shuffle();\n        for (let i = 0; i <= moves.length; i++) {\n            if (this.hex.gameOver) {\n                let winner = this.hex.winner;\n                for (let j = 0; j < i; j++) {\n                    this.hex.undo();\n                }\n                return winner;\n            }\n            this.hex.move(...moves[i]);\n        }\n    }\n    backpropagate(winner) {\n        this.games++;\n        if (this.parent !== undefined) {\n            this.wins += winner === this.parent.hex.currentPlayer;\n            this.parent.backpropagate(winner);\n        }\n    }\n}\n\nexport default class Mcts {\n    constructor(hex) {\n        this.hex = hex;\n        this.rootNode = new Node(hex);\n    }\n    bestMove(simulations = 4000) {\n        if (this.rootNode.gameOver) {\n            return;\n        }\n        while (simulations--) {\n            let node = this.rootNode.select();\n            node.expand();\n        }\n        let bestChild = this.rootNode.children[0];\n        for (let child of this.rootNode.children) {\n            if (child.games > bestChild.games) {\n                bestChild = child;\n            }\n        }\n        console.log(this.rootNode);\n        return bestChild.moveIndex;\n    }\n    move() {\n        let time = new Date().getTime();\n        let move = this.bestMove();\n        this.hex.move(...move);\n        time = new Date().getTime() - time;\n        console.log(time + \"ms\")\n    }\n}","import React, { Component } from 'react'\nimport Hex from './Hex'\nimport styles from './css/game.module.scss'\nimport RandomPlayer from './RandomPlayer'\nimport Mcts from './Mcts'\n\n\nexport default class Game extends Component {\n    constructor(props) {\n        super(props)\n        this.canvasRef = React.createRef();\n        this.statusRef = React.createRef();\n        this.statusRef2 = React.createRef();\n        this.heightRef = React.createRef();\n        this.widthRef = React.createRef();\n        this.redRef = React.createRef();\n        this.blueRef = React.createRef();\n    }\n    isInteger(s) {\n        for (let i = 0; i < s.length; i++) {\n            if (!\"0123456789\".includes(s[i])) {\n                return false;\n            }\n        }\n        return s.length > 0 && parseInt(s) !== 0;\n    }\n    componentDidMount() {\n        this.canvas = this.canvasRef.current;\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.WHITE = [255, 255, 255];\n        this.BLACK = [0, 0, 0];\n        this.RED = [255, 0, 0];\n        this.BLUE = [0, 0, 255];\n        this.interval = setInterval(() => {\n            this.update()\n            this.draw()\n        }, 1000 / 30);\n        let _this = this;\n        this.canvas.addEventListener('click', function (e) {\n            const rect = _this.canvas.getBoundingClientRect();\n            const ratioX = _this.canvas.width / rect.width;\n            const ratioY = _this.canvas.height / rect.height;\n            const x = ratioX * (e.clientX - rect.left);\n            const y = ratioY * (e.clientY - rect.top);\n            _this.mousePressed(x, y)\n        })\n    }\n    startGame() {\n        if (!this.isInteger(this.heightRef.current.value) || !this.isInteger(this.widthRef.current.value)) {\n            return;\n        }\n        this.aiRed = this.redRef.current.value;\n        this.aiBlue = this.blueRef.current.value;\n        let height = parseInt(this.heightRef.current.value);\n        let width = parseInt(this.widthRef.current.value);\n        this.hex = new Hex(width, height);\n        this.hexagons = new Array(this.hex.HEIGHT);\n        this.cellSize = this.canvas.width / (Math.max(this.hex.WIDTH, this.hex.HEIGHT) * 1.5 * 2);\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            this.hexagons[i] = new Array(this.hex.WIDTH);\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                this.hexagons[i][j] = [];\n                let center = this.getCenter(i, j);\n                for (let k = 0; k < 6; k++) {\n                    let angle = k * Math.PI / 3 + Math.PI / 2;\n                    this.hexagons[i][j].push([center[0] + this.cellSize * Math.cos(angle), center[1] - this.cellSize * Math.sin(angle)]);\n                }\n            }\n        }\n        this.draw();\n    }\n    getCenter(row, col) {\n        let s60 = Math.sin(Math.PI / 3);\n        let x = this.cellSize * 1.5 + row * this.cellSize * s60 + col * 2 * this.cellSize * s60;\n        let y = this.cellSize * 1.5 + row * this.cellSize * 3 / 2;\n        return [x, y];\n    }\n    drawCell(row, col) {\n        this.ctx.strokeStyle = \"black\";\n        this.ctx.lineWidth = 2;\n        let points = this.hexagons[row][col];\n        this.ctx.beginPath();\n        for (let i = 0; i < 6; i++) {\n            this.ctx.moveTo(...points[i]);\n            this.ctx.lineTo(...points[(i + 1) % 6]);\n        }\n        this.ctx.stroke();\n        this.ctx.lineWidth = 5;\n        for (let i = 0; i < 6; i++) {\n            let coords = [[points[i][0], points[i][1]], [points[(i + 1) % 6][0], points[(i + 1) % 6][1]]];\n            let top = row === 0 && (i === 0 || i === 5);\n            let bottom = row === this.hex.HEIGHT - 1 && (i === 2 || i === 3);\n            let left = col === 0 && (i === 1 || i === 2);\n            let right = col === this.hex.WIDTH - 1 && (i === 4 || i === 5);\n            if (top || bottom) {\n                this.ctx.strokeStyle = \"red\";\n                this.ctx.beginPath();\n                this.ctx.moveTo(...coords[0]);\n                this.ctx.lineTo(...coords[1]);\n                this.ctx.stroke();\n            }\n            if (left || right) {\n                this.ctx.strokeStyle = \"blue\";\n                this.ctx.beginPath();\n                this.ctx.moveTo(...coords[0]);\n                this.ctx.lineTo(...coords[1]);\n                this.ctx.stroke();\n            }\n        }\n    }\n    draw() {\n        this.updatePlayer();\n        if (!this.hex) return;\n        this.ctx.fillStyle = \"white\";\n        this.ctx.rect(0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.fill();\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                this.ctx.fillStyle = \"white\";\n                this.drawCell(i, j);\n                let center = this.getCenter(i, j);\n                let color;\n                switch (this.hex.board[i][j]) {\n                    case 1:\n                        color = \"red\";\n                        break;\n                    case -1:\n                        color = \"blue\";\n                        break;\n                }\n                if (color) {\n                    this.ctx.strokeStyle = \"black\"\n                    this.ctx.lineWidth = 5;\n                    this.ctx.beginPath();\n                    this.ctx.arc(...center, this.cellSize / 2, 0, 2 * Math.PI);\n                    this.ctx.stroke();\n                    this.ctx.fillStyle = color;\n                    this.ctx.fill();\n                }\n            }\n        }\n    }\n    updatePlayer() {\n        let status = this.statusRef.current;\n        let status2 = this.statusRef2.current;\n        if (!this.hex) {\n            status.textContent = status2.textContent = \"\";\n            return;\n        }\n        if (!this.hex.gameOver) {\n            status.textContent = `${this.hex.currentPlayer > 0 ? \"Red\" : \"Blue\"}`\n            status2.textContent = \"'s Turn\";\n            if (this.hex.currentPlayer > 0) {\n                status.classList.remove(styles.blue);\n                status.classList.add(styles.red);\n            } else {\n                status.classList.remove(styles.red);\n                status.classList.add(styles.blue);\n            }\n        } else {\n            status.textContent = `${this.hex.winner > 0 ? \"Red\" : \"Blue\"}`\n            status2.textContent = \" Wins\";\n            if (this.hex.winner > 0) {\n                status.classList.remove(styles.blue);\n                status.classList.add(styles.red);\n            } else {\n                status.classList.remove(styles.red);\n                status.classList.add(styles.blue);\n            }\n        }\n    }\n    update() {\n        this.move();\n    }\n    move() {\n        if (!this.hex || this.hex.gameOver) return;\n        let playerString = this.hex.currentPlayer == 1 ? this.aiRed : this.aiBlue;\n        let playerClass;\n        if (playerString === \"manual\") {\n            if (this.manualMove) {\n                this.hex.move(...this.manualMove);\n                this.manualMove = null;\n            }\n            return;\n        }\n        switch (playerString) {\n            case \"random\":\n                playerClass = RandomPlayer;\n                break;\n            case \"mcts\":\n                playerClass = Mcts;\n                break;\n        }\n        let player = new playerClass(this.hex);\n        player.move();\n    }\n    undo(times = 1) {\n        if (!this.hex) return;\n        for (let i = 0; i < times; i++) {\n            this.hex.undo();\n        }\n    }\n    getCell(x, y) {\n        if (!this.hex) return;\n        for (let i = 0; i < this.hex.HEIGHT; i++) {\n            for (let j = 0; j < this.hex.WIDTH; j++) {\n                let center = this.getCenter(i, j);\n                if ((x - center[0]) ** 2 + (y - center[1]) ** 2 <= 3 / 4 * this.cellSize ** 2) {\n                    return [i, j];\n                }\n            }\n        }\n    }\n    mousePressed(x, y) {\n        let cellCoords = this.getCell(x, y);\n        if (cellCoords === undefined) return;\n        this.manualMove = cellCoords;\n    }\n    render() {\n        return (\n            <div class={styles.container}>\n                <div class={styles.controlsContainer}>\n                    <div class={styles.controls}>\n                        <h1>Hex</h1>\n                        <h2>Aaron He</h2>\n                        <label for=\"height\">Height:</label>\n                        <input type=\"number\" min=\"1\" name=\"height\" id=\"height\" ref={this.heightRef} defaultValue=\"6\" />\n                        <label for=\"width\">Width:</label>\n                        <input type=\"number\" min=\"1\" name=\"width\" id=\"width\" ref={this.widthRef} defaultValue=\"6\" />\n                        <br />\n                        <label for=\"red\">Red:</label>\n                        <select name=\"red\" id=\"red\" ref={this.redRef}>\n                            <option value=\"manual\">Manual</option>\n                            <option value=\"random\">Random</option>\n                            <option value=\"mcts\">MCTS</option>\n                        </select>\n                        <label for=\"blue\">Blue:</label>\n                        <select name=\"blue\" id=\"blue\" ref={this.blueRef}>\n                            <option value=\"manual\">Manual</option>\n                            <option value=\"random\">Random</option>\n                            <option value=\"mcts\">MCTS</option>\n                        </select>\n                        <br />\n                        <button onClick={() => this.startGame()}>Start game</button>\n                        <br />\n                        <button onClick={() => this.undo()} class={styles.undoButton}>Undo</button>\n                        <button onClick={() => this.undo(2)}>Undo 2</button>\n                    </div>\n                </div>\n                <div class={styles.game}>\n                    <span ref={this.statusRef} className={`${styles.status} ${styles.statusRef}`}></span>\n                    <span ref={this.statusRef2} className={styles.status}></span>\n                    <br />\n                    <canvas ref={this.canvasRef} width=\"2400\" height=\"1600\" style={{ width: \"70vw\" }}></canvas>\n                </div >\n            </div>\n        )\n    }\n}\n","import Game from './Game'\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"game_status__2JA7C\",\"statusRef\":\"game_statusRef__2spNS\",\"red\":\"game_red__AsdVU\",\"blue\":\"game_blue__2EDZp\",\"container\":\"game_container__2ViGJ\",\"controlsContainer\":\"game_controlsContainer__3hr-m\",\"controls\":\"game_controls__2ZQJd\",\"undoButton\":\"game_undoButton__300GP\"};"],"sourceRoot":""}